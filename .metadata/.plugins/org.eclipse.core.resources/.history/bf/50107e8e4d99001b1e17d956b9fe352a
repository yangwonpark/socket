<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>
	<h3>Admin</h3>	
	<!-- 채팅 영역 -->
	<!-- 유저가 접속할 때 마다 이 container에 채팅창 생성 -->
	<div class="chat-container" style="display: none">
		<h3>1:1 상담</h3>
		<!-- 서버와 메세지를 주고 받을 텍스트 영역 -->
		<div class="chat-area" style="width: 300px; height: 400px; border: 1px solid black;"></div>
		<input class="text-msg" type="text" onkeydown="if(event.keyCode === 13) return false;">
		<input type="button" class="send-btn" value="전송">
		<br/>
	</div>
</body>
<script>
	let sock = new SockJS('http://172.30.1.58:8080/park/adminEcho');
	
	sock.onopen = function(msg) {};
	sock.onclose = function(msg) {};
	sock.onerror = function(msg) {};
	
	// 서버로부터 메세지가 오면
	sock.onmessage = (message) => {
		// 메세지 구조는 JSON이다
		let node = JSON.parse(message.data);
		
		// 메세지를 보낸 회원의 이름과 메세지 내용을 client.jsp의 sendMessage() 함수에서 
		// sock.send(liveName + ":" + textMsg.value); 이렇게 날려줌
		// 그렇게 날라온 메세지가 현재 함수에서 message이고 그 안에 있는 data를  JSON으로 파싱한게 node이다
		// node.message의 데이터를 string으로 나누어서 이름, 메세지 내용 두 개로 분리한다
		// 이때 남아있는 "를 제거하기 위한 과정으로 string.replace(/\"/g,""); 를 사용한다(정규식)
		
		// 왜인진 모르겠으나 new String으로 안 하면 String 취급을 안해서 split, replace를 못 쓴다
		let messageParts = new String(JSON.stringify(node.message)).split(':');
		let userName = new String(messageParts[0]).replace(/\"/g,'');
		let content = new String(messageParts[1]).replace(/\"/g,'');
		
// 		console.log("message.data : " + message.data);
// 		console.log("message.message : " + message.message);	// 이렇게 불러오려고 했는데 안됌
//		console.log("node.status : " + node.status);
// 		console.log("node.message : " + node.message);
// 		console.log("userName : " + userName);
// 		console.log("content : " + content);
		
		if(node.status === "visit") {
			let chatContainer = $(".chat-container").html();
			chatContainer = $("<div class='float-left'></div>").attr("data-key", node.key).append(chatContainer);
			$("body").append(chatContainer);
		} else if(node.status === "message") {
			let $div = $("[data-key='" + node.key + "']");
			let log = $div.find(".chat-area").text();
			console.log(log);
			if(content === "" || content === "undefined" || content === null) {
				$div.find(".chat-area").text(userName + "<br>");
			} else {
				$div.find(".chat-area").text(log += userName + " :\n\t" + content + "\n");
			}
		} else if(node.status === "bye") {
			$("[data-key='" + node.key + "']").remove();
		}
	}
	
	$(document).on("click", ".send-btn", function() {
		let $div = $(this).closest(".float-left");
		// 메세지 텍스트 박스를 찾아서 값 얻어옴()
		let msg = $div.find(".text-msg").val();
		let key = $div.data("key");
		let log = $div.find(".chat-area").text();
		$div.find(".chat-area").text(log + "관리자" + " : " + msg + "\n");
		$div.find(".text-msg").val("");
		
		sock.send(key + ":" + msg);
	});
	
	
	// 엔터키 입력 시 sendMessage() 호출
	$(document).on("keydown", ".text-msg", function() {
		if(event.keyCode === 13) {
			$(this).closest(".float-left").find(".send-btn").trigger("click");
			return false;	
		}
		return true;
	});
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</script>
</html>