/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2021-04-11 08:54:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class admin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/views/header.jsp", Long.valueOf(1618038914013L));
    _jspx_dependants.put("jar:file:/C:/Users/ailee/Desktop/final_socket/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/final_socket2/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1600927084578L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Websocket - final</title>\r\n");
      out.write("</head>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/chat.css\">\r\n");
      out.write("<script\r\n");
      out.write("        src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\r\n");
      out.write("        integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\r\n");
      out.write("        crossorigin=\"anonymous\">\r\n");
      out.write("</script>\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.1/sockjs.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>웹 소켓 연습 - final</h1>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\t\r\n");
      out.write("\t");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t<h3>Admin</h3>\t\r\n");
      out.write("\t<!-- 채팅 영역 -->\r\n");
      out.write("\t<!-- 유저가 접속할 때 마다 이 container에 채팅창 생성 -->\r\n");
      out.write("\t<h3>1:1 상담</h3>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<div class=\"chat-container\" style=\"display: none\">\r\n");
      out.write("\t\t<div style=\"height: 12px;\"></div>\r\n");
      out.write("\t\t\t<!-- 서버와 메세지를 주고 받을 텍스트 영역 -->\r\n");
      out.write("\t\t\t<div class=\"chat-area\"></div>\r\n");
      out.write("\t\t\t<div class=\"input--text\">\r\n");
      out.write("\t\t\t\t<input class=\"text-msg\" type=\"text\" onkeydown=\"if(event.keyCode === 13) return false;\">\r\n");
      out.write("\t\t\t\t<input type=\"button\" class=\"send-btn\" value=\"전송\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<br/>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("\tlet sock = new SockJS('http://172.30.1.58:8080/park/adminEcho');\r\n");
      out.write("\t\r\n");
      out.write("\tsock.onopen = function(msg) {\r\n");
      out.write("\t\tconsole.log(\"admin 소켓 열림\");\r\n");
      out.write("\t};\r\n");
      out.write("\tsock.onclose = function(msg) {};\r\n");
      out.write("\tsock.onerror = function(msg) {};\r\n");
      out.write("\tsock.onmessage = onMessage;\r\n");
      out.write("\t\r\n");
      out.write("\t// 서버로부터 메세지가 오면\r\n");
      out.write("\t// 즉, sock.send로 메세지를 받으면 이쪽으로 온다\r\n");
      out.write("\tfunction onMessage(message) {\r\n");
      out.write("\t\t// 메세지 구조는 JSON이다\r\n");
      out.write("\t\tlet node = JSON.parse(message.data);\t// JSON을 js 객체로 변환\r\n");
      out.write("\t\tlet messageParts = new String(JSON.stringify(node.message)).split(':');\r\n");
      out.write("\t\tlet userName = new String(messageParts[0]).replace(/\\\"/g,'');\t\t\t//message.date에서 받아온 JSON구조를 string으로 변환하고 그걸 잘라냄\r\n");
      out.write("\t\tlet content = new String(messageParts[1]).replace(/\\\"/g,'');\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tconsole.log(\"message\");\t\t\t\t \t\t// JSON\t\t웹 소켓 자체적으로 전달되는 내장 message\r\n");
      out.write("\t\tconsole.log(message);\t\r\n");
      out.write("\t\tconsole.log(\"message.timeStamp\");\t\t\t// message 받아온 시간 \t\t\r\n");
      out.write("\t\tconsole.log(message.timeStamp);\r\n");
      out.write("\t\tconsole.log(\"node(=message.data)\");\t\t\t// message에 들어있는 data (send함수에 적어넣은 값)\r\n");
      out.write("\t\tconsole.log(node);\r\n");
      out.write("\t\tconsole.log(\"JSON.stringify(node)\");\r\n");
      out.write("\t\tconsole.log(JSON.stringify(node));\r\n");
      out.write("\t\tconsole.log(\"node.message\");\r\n");
      out.write("\t\tconsole.log(node.message);\r\n");
      out.write("\t\tconsole.log(\"JSON.stringify(node.message)\");\r\n");
      out.write("\t\tconsole.log(JSON.stringify(node.message));\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$('.chat-area').scrollTop($('.chat-area')[0].scrollHeight);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(node.status === \"visit\") {\r\n");
      out.write("// \t\t\tconst chatContainer = document.getElementsByClassName('chat-container').innerHTML;\r\n");
      out.write("\t\t\tlet chatContainer = $(\".chat-container\").html();\r\n");
      out.write("\t\t\tchatContainer = $(\"<div class='chat-container2'></div>\").attr(\"data-key\", node.key).append(chatContainer);\r\n");
      out.write("\t\t\t$(\".container\").append(chatContainer);\r\n");
      out.write("\t\t} else if(node.status === \"message\") {\r\n");
      out.write("\t\t\tlet time = message.timeStamp\r\n");
      out.write("\t\t\tconsole.log(time);\r\n");
      out.write("\t\t\tlet realDate = new Date(time).toLocaleString();\r\n");
      out.write("\t\t\tconsole.log(realDate);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tlet $div = $(\"[data-key='\" + node.key + \"']\");\r\n");
      out.write("\t\t\tlet log = $div.find(\".chat-area\").text();\r\n");
      out.write("\t\t\tif(content === \"\" || content === \"undefined\" || content === null) {\r\n");
      out.write("\t\t\t\t$div.find(\".chat-area\").append($(\"<span class='chat--left'>\" + userName + \"</span>\"));\r\n");
      out.write("// \t\t\t\t$div.find(\".chat--left\").text(userName + \"<br>\");\r\n");
      out.write("// \t\t\t\t$div.find(\".chat-area\").text(userName + \"<br>\");\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\t$div.find(\".chat-area\").append($(\"<span class='chat--left'>\" + \r\n");
      out.write("\t\t\t\t\t\t\"<span class='chat-user'>\" + userName + \"</span><br>\" +\r\n");
      out.write("\t\t\t\t\t\t\"<span class='chat-content'>\" + content + \"</span><br>\" +\r\n");
      out.write("\t\t\t\t\t\t\"<span class='chat-time'>\" + realDate + \"</span>\"));\r\n");
      out.write("// \t\t\t\t$div.find(\".chat--left\").text(log += userName + \" :\\n\\t\" + content + \"\\n\");\r\n");
      out.write("// \t\t\t\t$div.find(\".chat-area\").text(log += userName + \" :\\n\\t\" + content + \"\\n\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t} else if(node.status === \"bye\") {\r\n");
      out.write("\t\t\tlet $div = $(\"[data-key='\" + node.key + \"']\");\r\n");
      out.write("\t\t\tlet log = $div.find(\".chat-area\").text();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tlet totLog = JSON.stringify(log);\r\n");
      out.write("\t\t\tconsole.log(\"totLog\");\r\n");
      out.write("\t\t\tconsole.log(totLog);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tchatInsert(totLog);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"[data-key='\" + node.key + \"']\").remove();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$(document).on(\"click\", \".send-btn\", function(message) {\r\n");
      out.write("\t\tlet $div = $(this).closest(\".chat-container2\");\r\n");
      out.write("\t\t// 메세지 텍스트 박스를 찾아서 값 얻어옴()\r\n");
      out.write("\t\tlet msg = $div.find(\".text-msg\").val();\r\n");
      out.write("\t\tlet key = $div.data(\"key\");\r\n");
      out.write("\t\tlet log = $div.find(\".chat-area\").text();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet time = message.timeStamp\r\n");
      out.write("\t\tconsole.log(time);\r\n");
      out.write("\t\tlet realDate = new Date(time).toLocaleString();\r\n");
      out.write("\t\tconsole.log(realDate);\r\n");
      out.write("\t\tconsole.log(log);\r\n");
      out.write("\t\t$div.find(\".chat-area\").append($(\"<span class='chat--right'>\" +\r\n");
      out.write("\t\t\t\t\"<span class='chat-user'>관리자<br>\" + \r\n");
      out.write("\t\t\t\t\"<span class='chat-content'>\" + msg + \"</span><br>\" +\r\n");
      out.write("\t\t\t\t\"<span class='chat-time' style='margin-top: 0px'>\" + realDate + \"</span>\"));\r\n");
      out.write("// \t\t$div.find(\".chat-area\").text(log + \"관리자\" + \" : \" + msg + \"\\n\");\r\n");
      out.write("\t\t$div.find(\".text-msg\").val(\"\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tsock.send(key + \":\" + msg);\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t// 엔터키 입력 시 sendMessage() 호출\r\n");
      out.write("\t$(document).on(\"keydown\", \".text-msg\", function() {\r\n");
      out.write("\t\tif(event.keyCode === 13) {\r\n");
      out.write("\t\t\t$(this).closest(\".chat-container2\").find(\".send-btn\").trigger(\"click\");\r\n");
      out.write("\t\t\treturn false;\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t});\r\n");
      out.write("\t\t\r\n");
      out.write("// \t$(function() {\r\n");
      out.write("// \t\tlet isScrollUp = false;\r\n");
      out.write("// \t\tlet lastScrollTop;\r\n");
      out.write("\t\r\n");
      out.write("// \t\tlet chatArea = document.getElementsByClassName('chat-area');\r\n");
      out.write("\t\t\r\n");
      out.write("// \t\tif(!isScrollUp) {\r\n");
      out.write("// \t\t\t$('.chat-area').animate({\r\n");
      out.write("// \t\t\t\tscrollTop: chatArea.scrollHeight - chatArea.clientHeight\r\n");
      out.write("// \t\t\t}, 100);\r\n");
      out.write("// \t\t}\r\n");
      out.write("// \t});\r\n");
      out.write("\t\r\n");
      out.write("\tconst chatInsert = function(msg) {\r\n");
      out.write("\t\tconst ob = {\r\n");
      out.write("\t\t\t'msg': msg\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tconst json = JSON.stringify(ob);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tconst url = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/mongo';\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tconst opt = {\r\n");
      out.write("\t\t\t\tmethod: 'POST',\r\n");
      out.write("\t\t\t\tbody: json,\r\n");
      out.write("\t\t\t\theaders: {\r\n");
      out.write("\t\t\t\t\t'Content-type': 'application/json'\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfetch(url, opt)\r\n");
      out.write("\t\t.then(resp => resp.text())\r\n");
      out.write("\t\t.then(row => {\r\n");
      out.write("\t\t\tif(row == 1) {\r\n");
      out.write("\t\t\t\tconsole.log(\"대화가 저장되었습니다\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse {\r\n");
      out.write("\t\t\t\tconsole.log(\"저장에 실패했습니다\")\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/header.jsp(4,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("cpath");
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_eval_c_005fset_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_c_005fset_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_c_005fset_005f0);
        }
        do {
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          int evalDoAfterBody = _jspx_th_c_005fset_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_c_005fset_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/header.jsp(22,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${login == null }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t<a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/login\" style=\"text-decoration: none; color: black;\">로그인</a>\r\n");
          out.write("\t");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /WEB-INF/views/header.jsp(25,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${login != null }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t<a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/logout\" style=\"text-decoration: none; color: black;\">로그아웃</a>\r\n");
          out.write("\t\t");
          if (_jspx_meth_c_005fif_005f2(_jspx_th_c_005fif_005f1, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("\t\t");
          if (_jspx_meth_c_005fif_005f3(_jspx_th_c_005fif_005f1, _jspx_page_context))
            return true;
          out.write('\r');
          out.write('\n');
          out.write('	');
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f2 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f2_reused = false;
    try {
      _jspx_th_c_005fif_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f1);
      // /WEB-INF/views/header.jsp(27,2) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${login.userid == 'admin' }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f2 = _jspx_th_c_005fif_005f2.doStartTag();
      if (_jspx_eval_c_005fif_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t<a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/admin\" style=\"text-decoration: none; color: black;\">관리자</a>\r\n");
          out.write("\t\t");
          int evalDoAfterBody = _jspx_th_c_005fif_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f2);
      _jspx_th_c_005fif_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f3 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f3_reused = false;
    try {
      _jspx_th_c_005fif_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f1);
      // /WEB-INF/views/header.jsp(30,2) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f3.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${login.userid != 'admin' }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f3 = _jspx_th_c_005fif_005f3.doStartTag();
      if (_jspx_eval_c_005fif_005f3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t\t<a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/client\" style=\"text-decoration: none; color: black;\">사용자</a>\r\n");
          out.write("\t\t");
          int evalDoAfterBody = _jspx_th_c_005fif_005f3.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f3);
      _jspx_th_c_005fif_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f3, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f3_reused);
    }
    return false;
  }
}
